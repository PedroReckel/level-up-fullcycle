###
@tokenPartner1 = {{ loginPartner1.response.body.token }}

###
# @name loginPartner1
POST http://localhost:8080/auth/login
Content-Type: application/json

{
    "email": "partner1@user.com",
    "password": "secret"
}

###
@tokenCustomer1 = {{ loginCustomer1.response.body.token }}
# Toda vez que nos fizermos a chamada ele guarda nessa variável e assim podemos usar ela

###
# @name loginPartner2
POST http://localhost:8080/auth/login
Content-Type: application/json

{
    "email": "partner2@user.com",
    "password": "secret"
}

###
@tokenPartner2 = {{ loginPartner2.response.body.token }}

###
# @name loginCustomer1
POST http://localhost:8080/auth/login
Content-Type: application/json

{
    "email": "custumer1@user.com",
    "password": "secret"
}

###
@tokenCustomer1 = {{ loginCustomer1.response.body.token }}

### Criação do partner 1
POST http://localhost:8080/partners/register
Content-Type: application/json

{
    "name": "Partner 1",
    "email": "partner1@user.com",
    "password": "secret",
    "company_name": "Company Name 1"
}

### Criação do partner 2
POST http://localhost:8080/partners/register
Content-Type: application/json

{
    "name": "Partner 2",
    "email": "partner2@user.com",
    "password": "secret",
    "company_name": "Company Name 2"
}

###
POST http://localhost:8080/customers/register
Content-Type: application/json

{
    "name": "Custumer 1",
    "email": "custumer1@user.com",
    "password": "secret",
    "address": "address teste",
    "phone": "333333333"
}

###
POST http://localhost:8080/events
Content-Type: application/json

{
    "name": "Event test 1",
    "description": "event description",
    "date": "2025-01-01T00:00:00",
    "location": "location"
}

### Criação do evento pelo parceiro
POST http://localhost:8080/partners/events
Content-Type: application/json
Authorization: Bearer {{ tokenPartner1 }}

{
    "name": "Event test 1",
    "description": "event description",
    "date": "2025-01-01T00:00:00",
    "location": "location"
}

### Criação de tickets
POST http://localhost:8080/events/1/tickets
Content-Type: application/json
Authorization: Bearer {{ tokenPartner1 }}

{
    "num_tickets": 10,
    "price": 100
}

### Listagem de um tickets
GET http://localhost:8080/events/1/tickets

### Listagem de eventos
GET http://localhost:8080/events

### Listagem de um evento
GET http://localhost:8080/events/1

### Listagem de evento pelo parceiro
GET http://localhost:8080/partners/events
Authorization: Bearer {{ tokenPartner1 }}

### Listagem de um evento pelo parceiro
GET http://localhost:8080/partners/events/1
Authorization: Bearer {{ tokenPartner1 }}

### Criação das purchases
POST http://localhost:8080/purchases
Content-Type: application/json
Authorization: Bearer {{ tokenCustomer1 }}

{
    "ticket_ids": [1],
    "card_token": "tok_visa" // Em aplicações profissionais nunca se passa as informações do cartão de credito, no front-end tem uma chamada para a api do cartão de credito que retorna um token com as informações do cartao
}